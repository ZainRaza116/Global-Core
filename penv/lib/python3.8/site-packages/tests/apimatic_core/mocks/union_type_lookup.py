# -*- coding: utf-8 -*-

"""
typecombinatorsimple

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.types.union_types.any_of import AnyOf
from apimatic_core.types.union_types.leaf_type import LeafType
from apimatic_core.types.union_types.one_of import OneOf
from apimatic_core.types.union_types.union_type_context import UnionTypeContext as Context


class UnionTypeLookUp:

    """The `UnionTypeLookUp` class serves as a utility class for
    storing and managing type combinator templates.It acts as a container for the templates
    used in handling various data types within the application.

    """
    _union_types = {
        'ScalarModelAnyOfRequired': AnyOf([LeafType(float), LeafType(bool)]),
        'ScalarModelOneOfReqNullable': OneOf([LeafType(int), LeafType(str)], Context.create(is_nullable=True)),
        'ScalarModelOneOfOptional': OneOf([LeafType(int), LeafType(float), LeafType(str)], Context.create(is_optional=True)),
        'ScalarModelAnyOfOptNullable': AnyOf([LeafType(int), LeafType(bool)], Context.create(is_optional=True, is_nullable=True)),
        'ScalarTypes': OneOf([LeafType(float), LeafType(bool)]),
    }

    @staticmethod
    def get(name):
        return UnionTypeLookUp._union_types[name]

